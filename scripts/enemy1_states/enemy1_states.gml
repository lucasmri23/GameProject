function enemy1_state_idle(){
	velh=0;
	velv=0;
	if(global.jogo_iniciado = true){
		state = enemy1_state_patrol;	
	}
}
function enemy1_state_patrol() {
Â  Â  sprite_index = spr_enemy1_idle;

Â  Â  var dist = point_distance(x, y, obj_player.x, obj_player.y);
Â  Â  if (dist <= visao) {
Â  Â  Â  Â  state = enemy1_state_chase;
Â  Â  Â  Â  alertou = false;
Â  Â  Â  Â  path_end();
Â  Â  Â  Â  exit;
Â  Â  }
}
function enemy1_state_chase() {
Â  Â  var sala_inimigo = mapa.grid_sala[# (x div cell_t), (y div cell_t)];
Â  Â  if (minha_sala_id == -1 || minha_sala_id != sala_inimigo) {
Â  Â  Â  Â  minha_sala_id = sala_inimigo;
Â  Â  }

Â  Â  var sala_jogador = mapa.grid_sala[# (obj_player.x div cell_t), (obj_player.y div cell_t)];
Â  Â  var tem_visao = !collision_line(x, y, obj_player.x, obj_player.y, obj_colisao, true, false);

Â  Â  // Se o jogador estÃ¡ na mesma sala e visÃ­vel, define estado interno
Â  Â  if (sala_inimigo != -1 && sala_inimigo == sala_jogador && tem_visao) {
Â  Â  Â  Â  if (estado != "perseguicao") {
Â  Â  Â  Â  Â  Â  estado = "perseguicao";
Â  Â  Â  Â  Â  Â  ultima_sala_jogador = -1;
Â  Â  Â  Â  Â  Â  alertou = false;

Â  Â  Â  Â  Â  Â  if (ds_map_exists(global.salas, sala_inimigo) && !global.salas[? sala_inimigo].alerta) {
Â  Â  Â  Â  Â  Â  Â  Â  global.salas[? sala_inimigo].alerta = true;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  } 

Â  Â  // Recalcula o path
Â  Â  if (tempo_path_recalc <= 0) {
        show_debug_message("Inimigo " + string(id) + " - Recalculando path para X:" + string(obj_player.x) + " Y:" + string(obj_player.y));
        // ALTERAÃ‡ÃƒO: Destino do path simplificado
Â  Â  Â  Â  if (mp_grid_path(global.grid_pathfinding, caminho, x, y, obj_player.x, obj_player.y, true)) {
Â  Â  Â  Â  Â  Â  path_start(caminho, velc, path_action_stop, false);
Â  Â  Â  Â  Â  Â  path_atual = caminho;
            show_debug_message("Inimigo " + string(id) + " - Path encontrado e iniciado.");
Â  Â  Â  Â  } else {
            show_debug_message("AVISO: Inimigo " + string(id) + " - NÃ£o conseguiu encontrar um path para o jogador. PosiÃ§Ã£o inimigo: (" + string(x) + "," + string(y) + ") PosiÃ§Ã£o jogador: (" + string(obj_player.x) + "," + string(obj_player.y) + ")");
        }
Â  Â  Â  Â  tempo_path_recalc = path_delay;
Â  Â  } else {
Â  Â  Â  Â  tempo_path_recalc--;
Â  Â  }

Â  Â  // DireÃ§Ã£o do sprite
Â  Â  if (instance_exists(obj_player)) {
Â  Â  Â  Â  sprite_index = (obj_player.x > x) ? spr_enemy1_run_rigth : spr_enemy1_run_left;
Â  Â  }

Â  Â  // ðŸ”” PropagaÃ§Ã£o de alerta (usando BFS)
Â  Â  if (estado == "perseguicao" && !alertou && sala_inimigo != -1) {
Â  Â  Â  Â  propagar_alerta_bfs(sala_inimigo, 2);
Â  Â  Â  Â  alertou = true;
Â  Â  }

Â  Â  // ðŸ“£ LÃ³gica de pedido de reforÃ§o
Â  Â  if (estado == "perseguicao" && sala_inimigo != -1) {
Â  Â  Â  Â  if (tempo_prox_reforco <= 0) {
Â  Â  Â  Â  Â  Â  var sala_do_player = mapa.grid_sala[# (obj_player.x div cell_t), (obj_player.y div cell_t)];
Â  Â  Â  Â  Â  Â  if (sala_inimigo == sala_do_player) {Â 
Â  Â  Â  Â  Â  Â  Â  Â  solicitar_reforco(sala_inimigo);
Â  Â  Â  Â  Â  Â  Â  Â  tempo_prox_reforco = tempo_reforco_cooldown;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  tempo_prox_reforco--;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  // Se o jogador se distanciar muito, desiste
Â  Â  if (point_distance(x, y, obj_player.x, obj_player.y) > visao * 1.5) {
Â  Â  Â  Â  estado = "patrulha";
Â  Â  Â  Â  path_end();
Â  Â  Â  Â  state = enemy1_state_patrol;
Â  Â  }
	
	if (point_distance(x, y, obj_player.x, obj_player.y) <= alcance_ataque && atk_cd <=0) {
Â  Â  Â  Â  image_xscale = (obj_player.x >= x) ? -1 : 1;
		image_index = 0;
		state = enemy1_state_atk;
		path_end();
		exit;
	}
	
}
function enemy1_state_atk() {
Â  Â  velh = 0;
Â  Â  velv = 0;
Â  Â  sprite_index = spr_enemy1_atk;

Â  Â  if (image_index >= 5 && image_index < 6) {
Â  Â  Â  Â  if (!instance_exists(obj_hitbox_enemy1)) {
Â  Â  Â  Â  Â  Â  instance_create_layer(x - (9 * image_xscale), y + 8, "tileset", obj_hitbox_enemy1);
Â  Â  Â  Â  }
Â  Â  }
Â  Â  if (image_index >= 8 && instance_exists(obj_hitbox_enemy1)) {
Â  Â  Â  Â  instance_destroy(obj_hitbox_enemy1);
Â  Â  }

Â  Â  if (image_index >= image_number - 1) {
Â  Â  Â  Â  if (instance_exists(obj_hitbox_enemy1)) {
Â  Â  Â  Â  Â  Â  instance_destroy(obj_hitbox_enemy1);
Â  Â  Â  Â  }
Â  Â  Â  Â  atk_started = false;
Â  Â  Â  Â  atk_cd = 90;
Â  Â  Â  Â  state = enemy1_state_chase;
Â  Â  }
}

function enemy1_state_hurt() {
	velh = 0;
	velv = 0;
Â  Â  if (!variable_instance_exists(id, "hurt_started") || !hurt_started) {
Â  Â  Â  Â  hurt_started = true;
Â  Â  Â  Â  image_index = 0;
		sprite_index = spr_enemy1_hurt_front;
Â  Â  }

Â  Â  if (image_index >= image_number - 1) {
Â  Â  Â  Â  hurt_started = false;
Â  Â  Â  Â  state = enemy1_state_chase;
Â  Â  }
}
function enemy1_state_dead(){
	velh = 0;
	velv = 0;
	sprite_index = spr_enemy1_death;
	
	if (!death_started) {
		death_started = true;
		image_index = 0;
Â  Â  }
	Â  Â  if (image_index >= image_number - 1) {
			image_index = image_number - 1;
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  if (minha_sala_id != -1 && ds_map_exists(global.salas, minha_sala_id)) {
Â  Â  Â  Â  Â  Â  Â  Â  var sala_onde_morreu = global.salas[? minha_sala_id];
Â  Â  Â  Â  Â  Â  Â  Â  sala_onde_morreu.inimigos_ativos_count--;
Â  Â  Â  Â  Â  Â  Â  Â  if (sala_onde_morreu.inimigos_ativos_count <= 0) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  sala_onde_morreu.alerta = false;
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
			global.inimigos_vivos -= 1;

			// Verifica vitÃ³ria
			if (global.inimigos_vivos <= 0){
				room_goto(Room_win);
			}
			instance_destroy();
Â  Â  }
	
}